#!/usr/bin/env python3

import argparse
import json
import os

from govmoney import (
	ld1, 
	ld2, 
	ld203, 
	schda, 
	schdb
)



parser = argparse.ArgumentParser(
	description="Parses government webpages for money filings",
    formatter_class=argparse.RawTextHelpFormatter
)

parser.add_argument("data_type",
                    help="The type of data to pull")

parser.add_argument("-y", "--year",
	                default=None,
	                dest="year",
	                help="What year to download")

parser.add_argument("-d", "--directory",
                    default="data",
                    dest="out_dir", 
                    help="The output directory")

parser.add_argument("-f", "--force",
	                default=False,
	                action="store_true",
	                dest="force",
	                help="Force download all files")

parser.add_argument("-u", "--update_times",
	                default=None,
	                dest="update_times",
	                help="Path to JSON describing when each file was updated")

parser.add_argument("--debug",
	                default=False,
	                action="store_true",
	                dest="debug",
	                help="Debug mode skips downloading the actual files")


args = parser.parse_args()

if args.update_times is None:
	args.update_times = os.path.join(args.out_dir, "update_times.json")

options = {
	"ld1": ld1,
	"ld2": ld2,
	"ld203": ld203,
	"schda": schda,
	"schdb": schdb
}

# Verify valid data type
if args.data_type not in options:
	print(f"Invalid data_type: {args.data_type}")
	print(f"Choose from: {list(options.keys())}")

# Check if updated_times.json is valid, if not create the default.
try:
	with open(args.update_times, "r") as f:
	    update_times = json.load(f)
except:
	print(f"{args.update_times} not found")
	update_times = {}


if args.force:
	update_times = {}

new_updated_times = options[args.data_type](args.out_dir, 
									        args.year, 
									        update_times, 
									        args.debug)

update_times.update(new_updated_times)

with open(args.update_times, "w") as f:
	os.makedirs(os.path.dirname(args.update_times), exist_ok=True)
	json.dump(update_times, f)

